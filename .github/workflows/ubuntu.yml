name: Ubuntu CI

on:
  workflow_dispatch:
    inputs:
      developer_build:
        description: 'Set to OFF for Release wheels'
        required: false
        default: 'ON'

  push:
    branches:
      - master
  pull_request:
    types: [opened, reopened, synchronize]  # Rebuild on new pushes to PR

jobs:
  build-wheel:
    name: Build wheel
    runs-on: Ubuntu-18.04
    strategy:
      fail-fast: false
      matrix:
        python_version: [3.6]
    env:
      BUILD_CUDA_MODULE: ON
      NPROC: 2
      OPEN3D_ML_ROOT: ${{ github.workspace }}/Open3D-ML
      DEVELOPER_BUILD: ${{ github.event.inputs.developer_build }}
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Checkout Open3D-ML source code
        uses: actions/checkout@v2
        with:
          repository: intel-isl/Open3D-ML
          path: ${{ env.OPEN3D_ML_ROOT }}

      - name: Setup cache
        uses: actions/cache@v2
        with:
          # Ref: https://github.com/apache/incubator-mxnet/pull/18459/files
          path: ~/.ccache
          # We include the commit sha in the cache key, as new cache entries are
          # only created if there is no existing entry for the key yet.
          key: ${{ runner.os }}-ccache-${{ github.sha }}
          # Restore any ccache cache entry, if none for
          # ${{ runner.os }}-ccache-${{ github.sha }} exists.
          # Common prefix will be used so that ccache can be used across commits.
          restore-keys: |
            ${{ runner.os }}-ccache
      - name: Set up Python version
        uses: conda-incubator/setup-miniconda@v1
        with:
          auto-update-conda: false
          python-version: ${{ matrix.python_version }}
      # Pre-installed 18.04 packages: https://git.io/JfHmW
      - name: Install dependencies
        shell: bash -l {0}
        run: |
          ./util/install_deps_ubuntu.sh assume-yes
          sudo apt-get --yes install ccache
          ccache -M 500M  # See .github/workflows/readme.md for ccache strategy.
          source util/ci_utils.sh
          echo
          install_cuda_toolkit with-cudnn purge-cache
          nvcc --version
          # Export PATH and LD_LIBRARY_PATH (for CUDA) for the next step
          echo "PATH=$PATH" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=$LD_LIBRARY_PATH" >> $GITHUB_ENV
          echo
          echo "Installing CPU versions of packages"
          install_python_dependencies
          echo
          echo "using python: $(which python)"
          python --version
          echo -n "Using pip: "
          python -m pip --version
          echo "using cmake: $(which cmake)"
          cmake --version

      - name: Config and build wheel
        shell: bash -l {0}
        run: |
          PATH=/usr/lib/ccache:$PATH
          ccache -s
          source util/ci_utils.sh
          conda install conda-build=3.20.0 -y
          build_wheel
          ccache -s
          PIP_PKG_NAME="$(basename build/lib/python_package/pip_package/open3d*.whl)"
          echo "PIP_PKG_NAME=$PIP_PKG_NAME" >> $GITHUB_ENV
          CONDA_PKG_NAME="$(basename build/lib/python_package/conda_package/linux-64/open3d*.tar.bz2)"
          echo "CONDA_PKG_NAME=$CONDA_PKG_NAME" >> $GITHUB_ENV

